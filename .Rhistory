df %>% summarise(mean(Y1 - Y0)/nrow(df))
set.seed(1234)
N <- 1000
C <- sample(c("always", "never", "complier"), N, replace = T, prob = c(.15,.6,.25))
df <- data.frame(C)
df <- df %>%
mutate(D0 =
case_when(
C == 'complier' ~ 0,
C == 'never' ~ 0,
C == 'always' ~ 1),
D1 =
case_when(
C == 'complier' ~ 1,
C == 'never' ~ 0,
C == 'always' ~1)
)
head(df)
set.seed(1234)
df$Y0 <- rnorm(N, 0, 1)
df$Y1 <- rnorm(N, 0, 1)
df <- df %>%
mutate(
# Y0 always takers
Y0 = if_else(C == "always", Y0 + 6, Y0),
# Y0 complies
Y0 = if_else(C == "complier", Y0 + 3, Y0),
# Y1 compliers
Y1 = if_else(C == 'complier', Y1 + 7, Y1),
# Y1 for always takers
Y1 = if_else(C == 'always', Y1 + 6, Y1))
df %>% group_by(C) %>% summarise(mean(Y1 - Y0))
library(tidyverse)
set.seed(1234)
N <- 1000
C <- sample(c("always", "never", "complier"), N, replace = T, prob = c(.15,.6,.25))
df <- data.frame(C)
df <- df %>%
mutate(D0 =
case_when(
C == 'complier' ~ 0,
C == 'never' ~ 0,
C == 'always' ~ 1),
D1 =
case_when(
C == 'complier' ~ 1,
C == 'never' ~ 0,
C == 'always' ~1)
)
head(df)
set.seed(1234)
df$Y0 <- rnorm(N, 0, 1)
df$Y1 <- rnorm(N, 0, 1)
df <- df %>%
mutate(
# Y0 always takers
Y0 = if_else(C == "always", Y0 + 6, Y0),
# Y0 complies
Y0 = if_else(C == "complier", Y0 + 3, Y0),
# Y1 compliers
Y1 = if_else(C == 'complier', Y1 + 7, Y1),
# Y1 for always takers
Y1 = if_else(C == 'always', Y1 + 6, Y1))
df %>% group_by(C) %>% summarise(mean(Y1 - Y0))
df %>% summarise(mean(Y1 - Y0)/nrow(df))
df
dat.full <- df
head(dat.full)
dat.full$Z = rbinom(N, 1, .5)
dat.full
dat.full %>% mutate(D = if_else(C == 'complier', Z, D1))
dat.full
dat.full %>%
mutate(D =
case_when(C == 'never' ~ 0,
C == 'alwyas' ~ 1,
C == 'complier' & Z == 1 ~ 1,
C == 'complier' & Z == 0 ~ 0))
dat.full %>%
mutate(D =
case_when(C == 'never' ~ 0,
C == 'always' ~ 1,
C == 'complier' & Z == 1 ~ 1,
C == 'complier' & Z == 0 ~ 0))
dat.full %>%
mutate(D =
case_when(C == 'never' ~ 0,
C == 'always' ~ 1,
C == 'complier' & Z == 1 ~ 1,
C == 'complier' & Z == 0 ~ 0),
Y = if_else(Z == 1, Y1, Y0))
dat.obs <- dat.full %>%
mutate(D =
case_when(C == 'never' ~ 0,
C == 'always' ~ 1,
C == 'complier' & Z == 1 ~ 1,
C == 'complier' & Z == 0 ~ 0),
Y = if_else(Z == 1, Y1, Y0)) %>%
select(D, Z, Y)
head(dat.obs)
library(rstanarm)
stan_glm(Y ~ D, data = dat.obs)
stan_glm(Z ~ D, data = dat.obs)
lm(Z~D, data = dat.obs)
dat.full %>% count(C)
dat.full %>% count(C) %>% mutate(p= n/sum(n))
lm(Z~D, data = dat.obs)
dat.full
dat.obs
lm(Z~D, data = dat.obs)
lm(D~Z, data = dat.obs)
lm(Y~Z, data = data.obs)
lm(Y~Z, data = dat.obs)
lm(Y~Z, data = dat.obs)
p1 <- lm(Y~Z, data = dat.obs)
p1
lm(Y~Z, data = dat.obs)
pct_c <- lm(D~Z, data = dat.obs)
pct_c
itt <- lm(Y~Z, data = dat.obs)
itt
itt$coefficients['Z]
itt$coefficients['Z']
itt$coefficients['Z']
itt$coefficients['Z']/pct_c$coefficients['Z']
lm(Y~D, data = dat.obs)
step1 <- lm(D~Z, data = dat.obs)
step1.pred <- predict(step1)
step1$fitted.values
dat.obs$fitted <- step1$fitted.values
dat.obs$fitted <- step1$fitted
dat.obs
step2 <- lm(Y~fitted, data = dat.obs)
step2
summary(step2)
install.packages("ivreg")
library(ivreg)
?ivreg()
ivreg(Y~ D|Z, data = dat.obs )
ivreg(Y~ Z|D, data = dat.obs )
ivreg(Y~ D|Z, data = dat.obs )
summary(ivreg(Y~ D|Z, data = dat.obs ))
sampler <- function(N, seed = 1234){
set.seed(1234)
C <- sample(c("always", "never", "complier"), N, replace = T, prob = c(.15,.6,.25))
df <- data.frame(C)
df <- df %>%
mutate(D0 =
case_when(
C == 'complier' ~ 0,
C == 'never' ~ 0,
C == 'always' ~ 1),
D1 =
case_when(
C == 'complier' ~ 1,
C == 'never' ~ 0,
C == 'always' ~1)
)
df$Z <- rbinom(N, 1, .5)
df <- df %>%
mutate(D =
case_when(C == 'never' ~ 0,
C == 'always' ~ 1,
C == 'complier' & Z == 1 ~ 1,
C == 'complier' & Z == 0 ~ 0),
Y = if_else(Z == 1, Y1, Y0)) %>%
select(D, Z, Y)
reg <- ivreg(Y~ D|Z, data = df)
est <- reg$coefficients['D']
return(est)
}
sampler(N=1000)
sampler <- function(N){
C <- sample(c("always", "never", "complier"), N, replace = T, prob = c(.15,.6,.25))
df <- data.frame(C)
df <- df %>%
mutate(D0 =
case_when(
C == 'complier' ~ 0,
C == 'never' ~ 0,
C == 'always' ~ 1),
D1 =
case_when(
C == 'complier' ~ 1,
C == 'never' ~ 0,
C == 'always' ~1)
)
df$Y0 <- rnorm(N, 0, 1)
df$Y1 <- rnorm(N, 0, 1)
df <- df %>%
mutate(
# Y0 always takers
Y0 = if_else(C == "always", Y0 + 6, Y0),
# Y0 complies
Y0 = if_else(C == "complier", Y0 + 3, Y0),
# Y1 compliers
Y1 = if_else(C == 'complier', Y1 + 7, Y1),
# Y1 for always takers
Y1 = if_else(C == 'always', Y1 + 6, Y1))
df$Z <- rbinom(N, 1, .5)
df <- df %>%
mutate(D =
case_when(C == 'never' ~ 0,
C == 'always' ~ 1,
C == 'complier' & Z == 1 ~ 1,
C == 'complier' & Z == 0 ~ 0),
Y = if_else(Z == 1, Y1, Y0)) %>%
select(D, Z, Y)
reg <- ivreg(Y~ D|Z, data = df)
est <- reg$coefficients['D']
return(est)
}
sampler(N=1000)
sampler(N=1000)
library(parallel)
boot <- mclapply(1:10000, function(i){sampler(N=1000)}, mc.cores = 12)
boot
bind_rows(boot)
boot <- bind_rows(boot)
ggplot(boot, aes(D)) +
geom_density()
mean(boot$D)
mean(boot$D)
sd(boot$D)
df %>% group_by(C) %>% summarise(mean(Y1 - Y0))
df %>% summarise(mean(Y1 - Y0)/nrow(df))
df %>% summarise(mean(Y1 - Y0))
df %>% summarise(mean(Y1 - Y0))
ggplot(boot, aes(D)) +
geom_density()
set.seed(1234)
boot <- mclapply(1:10000, function(i){sampler(N=1000)}, mc.cores = 12)
boot <- bind_rows(boot)
mean(boot$D)
sd(boot$D)
mean(boot$D)
test <- 'world'
test
shiny::runApp('Dropbox/PRIISM/beta')
load("/Users/georgeperrett/Desktop/hw4.Rdata")
write.csv(hw4, '~/Desktop/hwr.csv')
runApp('Dropbox/PRIISM/Causal_Shiny/CausInferShiny.R')
shiny::runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
2/5
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Dashbaord_Version')
runApp('Dropbox/PRIISM/Causal_Shiny/CausInferShiny.R')
library(shinythemes)
runApp('Dropbox/PRIISM/Navbar_split')
runApp('Dropbox/PRIISM/Navbar_split')
fit <- navbarMenu(title = "Fit Causal models",
tabPanel(title = "Load Data",
sidebarPanel(
width = 4,
h3("Insert Options"),
h5("some options"))),
tabPanel(title = "Specify Model",
sidebarPanel(
width = 4,
h3("Insert Options"),
h5("some options")))
)
runApp('Dropbox/PRIISM/Navbar_split')
runApp('Dropbox/PRIISM/Navbar_split')
runApp('Dropbox/PRIISM/Navbar_split')
runApp('Dropbox/PRIISM/Navbar_split')
runApp('Dropbox/PRIISM/Navbar_split')
runApp()
runApp('Dropbox/PRIISM/Navbar_split')
runApp('Dropbox/PRIISM/Navbar_split')
rbinom(100, 1, .5)
rnorm(150)
data.frame(z = rbinom(150, 1, .5), x = rnorm(150))
dat$y <- ifelse(z ==1 , rnorm(150, 2, 1), rnorm(150, 1, 1))
dat$y <- ifelse(dat$z ==1 , rnorm(150, 2, 1), rnorm(150, 1, 1))
dat$z ==1
dat <- data.frame(z = rbinom(150, 1, .5), x = rnorm(150))
dat$y <- ifelse(dat$z ==1 , rnorm(150, 2, 1), rnorm(150, 1, 1))
write.csv(dat, '~/Desktop/dat.csv')
write.csv(dat, '~/tests/test1.csv')
write.csv(dat, '~/Dropbox/PRIISM/Navbar_split/tests/tests/test1.csv')
write.csv(dat, '~/Dropbox/PRIISM/Navbar_split/tests/test1.csv')
runApp('Dropbox/PRIISM/Navbar_split')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
fit <- navbarMenu(title = "Fit Causal models",
tabPanel(title = "Load Data",
sidebarLayout(
# Sidebar Panel
sidebarPanel(
# Input: file type
selectInput("filetype", "Select File Type",
choices = c("csv" = "csv",
"dta" = "dta",
"xlsx" = "xlsx",
"txt" = "txt",
"spss" = "spss")),
# Input: file
fileInput("file", "Choose File",
multiple = FALSE,
accept = NULL),
hr(),
# Input: header
checkboxInput("header", "Header", TRUE),
hr(),
# CDescribe Data
h4("Describe Data"),
# Randomized
radioButtons("rand", label = h6("Treatment Assignment"),
choices = list("Non-Random" = 1, "Random" = 2),
selected = 1),
# blocked opton if random is selected
conditionalPanel(
condition = 'input.rand == 2',
selectInput('blockcheck', 'Blocked Design:',
choices = c('No', 'Yes'))
),
# Column Selection for Z, and identify treatment
selectInput("zcol", "Select Treatment (Z) Column", choices = NULL),
#conditionalPanel(
#  condition = "input.zcol",
selectInput("trt.ind", "Select the Value Representing Receiving Treatment",
choices = NULL),
#)
# Grouping Variable
checkboxInput("gvarcheck", "Include Grouping Variable?", FALSE),
conditionalPanel(
condition = "input.gvarcheck",
selectInput("gvar", "Select Grouping Variable", choices = NULL)
)
),
# Main Panel
mainPanel(
# Output: Data file
h4("Status"),
textOutput("uploadconfirm"),
#textOutput("variableconfirm"),
hr(),
h4("Data"),
DT::dataTableOutput("uploads")
)
)
),
tabPanel(title = "Specify Model",
sidebarPanel(
width = 4,
h3("Insert Options"),
h5("some options")))
)
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
fit <- navbarMenu(title = "Fit Causal models",
tabPanel(title = "Load Data",
sidebarLayout(
# Sidebar Panel
sidebarPanel(
# Input: file type
selectInput("filetype", "Select File Type",
choices = c("csv" = "csv",
"dta" = "dta",
"xlsx" = "xlsx",
"txt" = "txt",
"spss" = "spss")),
# Input: file
fileInput("file", "Choose File",
multiple = FALSE,
accept = NULL),
hr(),
# Input: header
checkboxInput("header", "Header", TRUE),
hr(),
# CDescribe Data
h4("Describe Data"),
# Grouping Variable
checkboxInput("gvarcheck", "Include Grouping Variable?", FALSE),
conditionalPanel(
condition = "input.gvarcheck",
selectInput("gvar", "Select Grouping Variable", choices = NULL)
)
),
# Randomized
radioButtons("rand", label = h6("Treatment Assignment"),
choices = list("Non-Random" = 1, "Random" = 2),
selected = 1),
# blocked option if random is selected
conditionalPanel(
condition = 'input.rand == 2',
selectInput('blockcheck', 'Blocked Design:',
choices = c('No', 'Yes'))
),
# select blocking variables (if appropriate)
conditionalPanel(
condition = "input.blockcheck == 'Yes'",
selectInput("blockvar", "Select Blocking Variable(s)", choices = NULL)
),
# Column Selection for Z, and identify treatment
selectInput("zcol", "Select Treatment (Z) Column", choices = NULL),
#conditionalPanel(
#  condition = "input.zcol",
selectInput("trt.ind", "Type the Value Representing Receiving Treatment",
choices = NULL),
#)
# Main Panel
mainPanel(
# Output: Data file
h4("Status"),
textOutput("uploadconfirm"),
#textOutput("variableconfirm"),
hr(),
h4("Data"),
DT::dataTableOutput("uploads")
)
)
),
tabPanel(title = "Specify Model",
sidebarPanel(
width = 4,
h3("Insert Options"),
h5("some options")))
)
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
inv.log <- function(x){exp(.8*x)/(1 + exp(.8*x))}
x <- rnorm(150)
test <- data.frame(z = rbinom(150, 1, inv.log(x)), x = x)
test
y <-  rnorm(150, 3, 1)
test$y <- ifelse(test$z ==1, y + rnorm(150), y + rnorm(150) + 3)
test
t.test(test$x)
t.test(test$y~test$x)
?t.test
t.test(x=test$x, y=test$y)
t.test(x=test$x, y=test$z)
glm(y~ x, data = test)
summary(glm(y~ x, data = test))
summary(glm(z~ x, data = test))
runApp('Dropbox/PRIISM/Causal_Shiny/CausInferShiny.R')
load("/Users/georgeperrett/Desktop/hw4.Rdata")
hw4
write_csv(hw4, '~/Dropbox/PRIISM/hw4.csv')
runApp('Dropbox/PRIISM/Causal_Shiny/CausInferShiny.R')
runApp('Dropbox/PRIISM/thinkCausal_dev')
?radioButtons
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/Causal_Shiny/CausInferShiny.R')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
View(invcol)
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/Causal_Shiny/CausInferShiny.R')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/Causal_Shiny/CausInferShiny.R')
runApp('Dropbox/PRIISM/thinkCausal_dev')
runApp('Dropbox/PRIISM/thinkCausal_dev')
